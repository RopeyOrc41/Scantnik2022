#include <Arduino.h>
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

#include <TinyGPS++/TinyGPS++.h>
#include "BME_Sensor.h"

#include "arm_math.h"
#include "sqrt_integer.h"

// GUItool: begin automatically generated code
AudioInputI2S            i2s1;           //xy=1207,583
AudioMixer4              mixer1;         //xy=1341,582
AudioSynthWaveformSine   sine1;          //xy=1466,635
AudioFilterFIR           fir1;           //xy=1467,583
AudioOutputI2S           i2s2;           //xy=1518,474
AudioEffectMultiply      multiply1;      //xy=1612,608
AudioFilterFIR           fir2;           //xy=1763,608
AudioRecordQueue         queue1;         //xy=1889,607
AudioConnection          patchCord1(i2s1, 0, mixer1, 0);
AudioConnection          patchCord2(i2s1, 1, mixer1, 1);
AudioConnection          patchCord3(mixer1, fir1);
AudioConnection          patchCord4(mixer1, 0, i2s2, 0);
AudioConnection          patchCord5(mixer1, 0, i2s2, 1);
AudioConnection          patchCord6(sine1, 0, multiply1, 1);
AudioConnection          patchCord7(fir1, 0, multiply1, 0);
AudioConnection          patchCord8(multiply1, fir2);
AudioConnection          patchCord9(fir2, queue1);
// GUItool: end automatically generated code

//uint16_t HBP_NUM_COEFFICIENTS = 172;
//int16_t HBP_COEFFICIENTS[172] = {0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 30000, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0};

uint16_t HBP_NUM_COEFFICIENTS = 1244;
int16_t HBP_COEFFICIENTS[1244] = {3, -4, -2, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 0, -1, -2, -2, -2, -3, -3, -2, -2, -1, 0, 1, 2, 2, 3, 3, 4, 4, 3, 3, 2, 0, -1, -2, -3, -4, -5, -5, -5, -4, -3, -2, -1, 1, 3, 4, 5, 6, 7, 6, 6, 5, 3, 1, -1, -3, -5, -7, -8, -9, -8, -7, -6, -4, -1, 2, 4, 7, 9, 10, 11, 11, 9, 7, 5, 2, -2, -5, -8, -11, -13, -14, -13, -12, -9, -6, -2, 2, 6, 10, 14, 16, 17, 16, 15, 12, 8, 3, -3, -8, -13, -16, -19, -20, -20, -18, -14, -9, -3, 3, 9, 15, 20, 23, 24, 24, 21, 17, 11, 4, -3, -11, -18, -23, -27, -29, -28, -26, -20, -14, -5, 4, 13, 21, 27, 32, 34, 34, 30, 24, 16, 6, -4, -15, -24, -32, -37, -40, -39, -35, -29, -19, -8, 4, 17, 28, 37, 43, 46, 46, 41, 33, 22, 9, -5, -19, -32, -42, -50, -53, -53, -48, -38, -26, -11, 5, 21, 36, 48, 57, 61, 60, 55, 44, 30, 13, -5, -24, -41, -55, -65, -69, -69, -62, -51, -35, -15, 6, 26, 46, 62, 73, 78, 78, 70, 57, 39, 18, -6, -29, -51, -69, -82, -88, -87, -79, -65, -45, -21, 6, 32, 56, 77, 91, 98, 97, 89, 73, 51, 24, -6, -35, -62, -85, -101, -109, -108, -99, -81, -57, -27, 5, 38, 68, 93, 111, 120, 120, 110, 90, 63, 31, -5, -41, -74, -102, -122, -132, -132, -121, -100, -70, -35, 4, 44, 80, 111, 133, 144, 144, 133, 110, 78, 39, -4, -47, -87, -120, -144, -157, -157, -145, -120, -86, -43, 3, 50, 93, 130, 156, 170, 171, 158, 131, 94, 48, -2, -53, -100, -139, -168, -184, -185, -171, -142, -102, -53, 1, 55, 106, 149, 180, 197, 199, 184, 154, 111, 59, 1, -58, -113, -159, -193, -211, -213, -197, -166, -120, -64, -2, 60, 119, 168, 205, 225, 227, 211, 178, 129, 70, 4, -63, -125, -178, -217, -239, -242, -225, -190, -139, -76, -6, 65, 131, 187, 229, 253, 256, 239, 202, 148, 82, 8, -66, -137, -196, -241, -266, -270, -252, -214, -157, -88, -11, 68, 142, 205, 252, 279, 284, 265, 225, 167, 94, 13, -69, -147, -213, -263, -292, -297, -279, -237, -176, -101, -16, 70, 151, 221, 273, 304, 310, 291, 249, 185, 107, 19, -71, -156, -228, -283, -315, -322, -303, -259, -194, -113, -22, 71, 159, 235, 292, 326, 334, 315, 270, 203, 119, 25, -71, -162, -241, -301, -336, -345, -326, -280, -211, -125, -29, 71, 165, 246, 308, 345, 355, 336, 289, 219, 131, 32, -70, -167, -251, -315, -354, -364, -345, -298, -226, -137, -35, 69, 169, 255, 320, 361, 372, 353, 306, 233, 142, 39, -68, -169, -258, -325, -367, -379, -360, -312, -239, -147, -42, 66, 170, 260, 329, 372, 384, 366, 318, 245, 151, 45, -65, -169, -261, -331, -375, -389, -371, -323, -250, -155, -49, 62, 168, 261, 333, 378, 392, 375, 327, 254, 159, 52, -60, -167, -260, -333, -379, -394, -377, -330, -257, -162, -55, 57, 165, 259, 332, 379, 395, 379, 332, 259, 165, 57, -55, -162, -257, -330, -377, -394, -379, -333, -260, -167, -60, 52, 159, 254, 327, 375, 392, 378, 333, 261, 168, 62, -49, -155, -250, -323, -371, -389, -375, -331, -261, -169, -65, 45, 151, 245, 318, 366, 384, 372, 329, 260, 170, 66, -42, -147, -239, -312, -360, -379, -367, -325, -258, -169, -68, 39, 142, 233, 306, 353, 372, 361, 320, 255, 169, 69, -35, -137, -226, -298, -345, -364, -354, -315, -251, -167, -70, 32, 131, 219, 289, 336, 355, 345, 308, 246, 165, 71, -29, -125, -211, -280, -326, -345, -336, -301, -241, -162, -71, 25, 119, 203, 270, 315, 334, 326, 292, 235, 159, 71, -22, -113, -194, -259, -303, -322, -315, -283, -228, -156, -71, 19, 107, 185, 249, 291, 310, 304, 273, 221, 151, 70, -16, -101, -176, -237, -279, -297, -292, -263, -213, -147, -69, 13, 94, 167, 225, 265, 284, 279, 252, 205, 142, 68, -11, -88, -157, -214, -252, -270, -266, -241, -196, -137, -66, 8, 82, 148, 202, 239, 256, 253, 229, 187, 131, 65, -6, -76, -139, -190, -225, -242, -239, -217, -178, -125, -63, 4, 70, 129, 178, 211, 227, 225, 205, 168, 119, 60, -2, -64, -120, -166, -197, -213, -211, -193, -159, -113, -58, 1, 59, 111, 154, 184, 199, 197, 180, 149, 106, 55, 1, -53, -102, -142, -171, -185, -184, -168, -139, -100, -53, -2, 48, 94, 131, 158, 171, 170, 156, 130, 93, 50, 3, -43, -86, -120, -145, -157, -157, -144, -120, -87, -47, -4, 39, 78, 110, 133, 144, 144, 133, 111, 80, 44, 4, -35, -70, -100, -121, -132, -132, -122, -102, -74, -41, -5, 31, 63, 90, 110, 120, 120, 111, 93, 68, 38, 5, -27, -57, -81, -99, -108, -109, -101, -85, -62, -35, -6, 24, 51, 73, 89, 97, 98, 91, 77, 56, 32, 6, -21, -45, -65, -79, -87, -88, -82, -69, -51, -29, -6, 18, 39, 57, 70, 78, 78, 73, 62, 46, 26, 6, -15, -35, -51, -62, -69, -69, -65, -55, -41, -24, -5, 13, 30, 44, 55, 60, 61, 57, 48, 36, 21, 5, -11, -26, -38, -48, -53, -53, -50, -42, -32, -19, -5, 9, 22, 33, 41, 46, 46, 43, 37, 28, 17, 4, -8, -19, -29, -35, -39, -40, -37, -32, -24, -15, -4, 6, 16, 24, 30, 34, 34, 32, 27, 21, 13, 4, -5, -14, -20, -26, -28, -29, -27, -23, -18, -11, -3, 4, 11, 17, 21, 24, 24, 23, 20, 15, 9, 3, -3, -9, -14, -18, -20, -20, -19, -16, -13, -8, -3, 3, 8, 12, 15, 16, 17, 16, 14, 10, 6, 2, -2, -6, -9, -12, -13, -14, -13, -11, -8, -5, -2, 2, 5, 7, 9, 11, 11, 10, 9, 7, 4, 2, -1, -4, -6, -7, -8, -9, -8, -7, -5, -3, -1, 1, 3, 5, 6, 6, 7, 6, 5, 4, 3, 1, -1, -2, -3, -4, -5, -5, -5, -4, -3, -2, -1, 0, 2, 3, 3, 4, 4, 3, 3, 2, 2, 1, 0, -1, -2, -2, -3, -3, -2, -2, -2, -1, 0, 0, 1, 1, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -2, -4, 3};

uint16_t HLP_NUM_COEFFICIENTS = 28;
int16_t HLP_COEFFICIENTS[28] = {78, 168, 326, 560, 878, 1280, 1760, 2298, 2866, 3430, 3948, 4380, 4690, 4854, 4854, 4690, 4380, 3948, 3430, 2866, 2298, 1760, 1280, 878, 560, 326, 168, 78};
 
arm_cfft_radix4_instance_q15 fft_inst;


void setup() {
    Serial.begin(2000000);
    mixer1.gain(1, 10.0);
    mixer1.gain(2, 10.0);
    sine1.amplitude(1);
    sine1.frequency(1913.87);
    fir1.begin(HBP_COEFFICIENTS, HBP_NUM_COEFFICIENTS);
    fir2.begin(HLP_COEFFICIENTS, HLP_NUM_COEFFICIENTS);
    queue1.begin();
    AudioMemory(64);
    arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
}


uint8_t newSamplePointer = 34;
int16_t samples[1024] __attribute__ ((aligned (4)));
int16_t buffer[2048] __attribute__ ((aligned (4)));
int16_t output[512] __attribute__ ((aligned (4)));


void loop() {

Loop_BME();

 if(queue1.available()){
    delay(1);
    int16_t* packet = queue1.readBuffer();
    samples[newSamplePointer] = packet[0];
    queue1.freeBuffer();
    newSamplePointer = newSamplePointer - 1;
    
    if(newSamplePointer == 255) {
        /*
        for (size_t i = 0; i < 40; i++)
        {
            Serial.print("p:");
            Serial.print(i + 90);
            Serial.print(" v:");    Serial.println(newSamplePointer);

            Serial.println(fftBuffer[i + 90]);
        }*/

        newSamplePointer = 34;

        // Enventanar

        for (size_t i = 0; i < 1024; i++) {
            buffer[i * 2 + 0] = samples[i];// * window[i]; // real
            buffer[i * 2 + 1] = 0; // imag
        }
        

        // Hacer la FFT
        arm_cfft_radix4_q15(&fft_inst, buffer);


        double abs[512];
        double mean = 0;
        for (size_t i = 0; i < 512; i++) {
            // abs = sqrt(real^2 + imag^2)
            abs[i] = sqrt(pow((double)buffer[i*2 + 0],2) + pow((double)buffer[i*2 + 1],2));
            mean = mean + (double)abs[i];
        }

        mean = mean / 512;

        // Encontrar el pico mÃ¡ximo
        uint16_t max_i = 30;
        for (size_t i = 30; i < 512; i++) {
            if(abs[i] > abs[max_i]) max_i = i;
        }

        // Calcular la SNR
        double noise = 0.0;
        for (size_t i = 30; i < 512; i++) {
            if(abs(max_i - i) > 5 && abs[i] > noise) {
                noise = abs[i];
            }
        }

        Serial.println("\n");
        double snr = 20 * log10(abs[max_i] / noise);

        Serial.print("RelaciÃ³n seÃ±al/ruido: ");
        Serial.print(snr);
        Serial.println("dB");

        double f = 1913.87 + max_i / 512.0 * 172.2656;

        Serial.print("Frecuencia maxima: ");
        Serial.print(f);
        Serial.print("Hz n:");
        Serial.println(max_i);
        
        double df = 2000 - f;
        Serial.print("Delta f: ");
        Serial.print(df);
        
        double v = df/2000 * 343.00;
        double vkmh = v * 3.6;
        Serial.print("hz, velocidad:");
        Serial.print(v);
        Serial.print("m/s, ");
        Serial.print(vkmh);
        Serial.println("km/h");
        
        const uint16_t blockCount = 5;
        const uint16_t mvmnt = (blockCount - 1) * 35 -1;
        // Mover para la derecha 35 muestras (real + imag);
        for (size_t i = mvmnt; i <= mvmnt; i--){
            samples[i + 35] = samples[i];
        }
      
    }



 }

}